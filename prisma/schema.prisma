// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  image       String?
  createdAt   DateTime      @default(now())
  Appointment Appointment[]
  locations   LocationProfile[]
}

model Therapist {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String              @unique
  image             String?
  createdAt         DateTime            @default(now())
  services          Service[]
  TherapistServices TherapistServices[]
  Appointment       Appointment[]
}

model Service {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String
  price               Float
  therapists          Therapist[]
  TherapistServices   TherapistServices[]
  AppointmentServices AppointmentServices[]
}

model TherapistServices {
  id          Int       @id @default(autoincrement())
  therapist   Therapist @relation(fields: [therapistId], references: [id])
  therapistId Int
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   Int
  createdAt   DateTime  @default(now())

  @@unique([therapistId, serviceId])
}

model Appointment {
  id          Int                   @id @default(autoincrement())
  date        DateTime
  user        User                  @relation(fields: [userId], references: [id])
  userId      Int
  therapist   Therapist             @relation(fields: [therapistId], references: [id])
  therapistId Int
  services    AppointmentServices[]
  createdAt   DateTime              @default(now())
  location    LocationProfile       @relation(fields: [locationId], references: [id])
  locationId  Int
}

model AppointmentServices {
  id            Int         @id @default(autoincrement())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int
  service       Service     @relation(fields: [serviceId], references: [id])
  serviceId     Int
  createdAt     DateTime    @default(now())

  @@unique([appointmentId, serviceId])
}

model LocationProfile {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  area        String
  city        String
  state       String
  pincode     String
  phone       String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  Appointment Appointment[]
}

